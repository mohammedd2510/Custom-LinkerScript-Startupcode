/*
    @file   linkerscript.ld
    @author Mohamed Osama
    @brief  Linker script for STM32F407VGTx Device from STM32F4 series
*/

/* Highest address of the user mode stack */
_estack = ORIGIN(RAM) + LENGTH(RAM) ; /* End of "RAM" Ram type memory */
_Min_Heap_Size = 0x200 ; /* Required amount of heap */
_Min_Stack_Size = 0x400 ; /* Required amount of stack */

/* Memories definition -> Label_Name(AttributeList) : ORIGIN = StartMemoryAddress,   LENGTH = MemoryLength */
MEMORY
{
    CCMRAM (xrw)    : ORIGIN = 0x10000000 , LENGTH = 64K
    RAM    (xrw)    : ORIGIN = 0x20000000 , LENGTH = 128K
    FLASH  (rx)     : ORIGIN = 0x08000000 , LENGTH = 1024K
}

/* Sections */
SECTIONS
{
    .isr_vector :
    {
        . = ALIGN(4);
        *(.isr_vector)
        . = ALIGN(4);
    } >FLASH

/* .text section, The program code and other data into "FLASH" Rom type memory */
    .text :
    {
        . = ALIGN(4);
        *(.text)    /* .text sections (code) */
        *(.text*)   /* .text* sections (code) */ 
        . = ALIGN(4);
        _e_text = . ; /* Define a global symbols at end of code */
    } >FLASH
 /* .rodata section, Constant data into "FLASH" Rom type memory */
    .rodata :
    {
        . = ALIGN(4);
        *(.rodata)    /* .rodata sections (code) */
        *(.rodata*)   /* .rodata* sections (code) */
        . = ALIGN(4);
    } >FLASH
    /* Used by the startup to initialize data */
    _sidata = LOADADDR(.data);
  /* .data section, Initialized data sections into "RAM" Ram type memory */
    .data :
    {
        _sdata = .; /* Create a global symbol at data start */
        . = ALIGN(4);
        *(.data)     /* .data sections */
        *(.data*)    /* .data* sections */
        . = ALIGN(4);
        _edata = . ; /* Define a global symbols at data end */
    } >RAM AT> FLASH

/* .bss section, Uninitialized data section into "RAM" Ram type memory */
    .bss :
    {
         _sbss = .; /* Create a global symbol at bss start */
        . = ALIGN(4);
        *(.bss)     /* .bss sections */
        *(.bss*)    /* .bss* sections */
        . = ALIGN(4);
        _ebss = . ; /* Define a global symbols at bss end */
    } >RAM
/* .User_heap_stack section, used to check that there is enough "RAM" Ram  type memory left */
    .User_heap_stack :
    {
    . = ALIGN(8);
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(8);
    } >RAM
}
